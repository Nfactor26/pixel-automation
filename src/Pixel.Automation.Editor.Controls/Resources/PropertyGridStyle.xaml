<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
                    xmlns:themes="clr-namespace:Xceed.Wpf.Toolkit.Themes;assembly=DotNetProjects.Wpf.Extended.Toolkit"
                    xmlns:metro="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
                    xmlns:metroControls="http://metro.mahapps.com/winfx/xaml/controls"
                    xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks"
                    xmlns:controls="http://metro.mahapps.com/winfx/xaml/controls"                   
                    xmlns:converters="clr-namespace:Xceed.Wpf.Toolkit.PropertyGrid.Converters;assembly=DotNetProjects.Wpf.Extended.Toolkit"
                    xmlns:utilities="clr-namespace:Xceed.Wpf.Toolkit.Core.Utilities;assembly=DotNetProjects.Wpf.Extended.Toolkit"
                    xmlns:editor="clr-namespace:Xceed.Wpf.Toolkit.PropertyGrid.Editors;assembly=DotNetProjects.Wpf.Extended.Toolkit"
                    xmlns:commands="clr-namespace:Xceed.Wpf.Toolkit.PropertyGrid.Commands;assembly=DotNetProjects.Wpf.Extended.Toolkit">

    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    <xctk:InverseBoolConverter x:Key="InverseBoolConverter" />
    <xctk:HalfConverter x:Key="HalfConverter" />
    <xctk:ExpandableObjectMarginConverter x:Key="ExpandableObjectMarginConverter" />
    <xctk:ObjectToUIElementConverter x:Key="ObjectToUIElementConverter" />
    <xctk:IsStringEmptyConverter x:Key="IsStringEmptyConverter" />
    <xctk:IsDefaultCategoryConverter x:Key="IsDefaultCategoryConverter" />
    <xctk:SelectedObjectConverter x:Key="ObjectConverter" />
    <converters:PropertyItemEditorConverter x:Key="PropertyItemEditorConverter"/>

    <SolidColorBrush x:Key="MouseOverBorderBrush" Color="#FFFFB700" />
    <LinearGradientBrush x:Key="MouseOverBackgroundBrush" StartPoint="0,0"  EndPoint="0,1">
        <GradientStop Offset="0" Color="#FFFEFBF4" />
        <GradientStop Offset="0.19" Color="#FFFDE7CE" />
        <GradientStop Offset="0.39" Color="#FFFDDEB8" />
        <GradientStop Offset="0.39" Color="#FFFFCE6B" />
        <GradientStop Offset="0.79" Color="#FFFFDE9A" />
        <GradientStop Offset="1" Color="#FFFFEBAA" />
    </LinearGradientBrush>

    <SolidColorBrush x:Key="CheckedBorderBrush" Color="#FFC29B29" />
    <LinearGradientBrush x:Key="CheckedBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="#FFFFDCA0" />
        <GradientStop Offset="0.18" Color="#FFFFD692" />
        <GradientStop Offset="0.39" Color="#FFFFC45D" />
        <GradientStop Offset="1" Color="#FFFFD178" />
    </LinearGradientBrush>

    <SolidColorBrush x:Key="PressedBorderBrush" Color="#FFC29B29" />
    <LinearGradientBrush x:Key="PressedBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="#FFE3C085" />
        <GradientStop Offset="0.19" Color="#FFF4CC89" />
        <GradientStop Offset="0.36" Color="#FFF5C777" />
        <GradientStop Offset="0.36" Color="#FFF5BB56" />
        <GradientStop Offset="0.79" Color="#FFF4CE9A" />
        <GradientStop Offset="1" Color="#FFF3E28D" />
    </LinearGradientBrush>


    <Thickness x:Key="ControlMargin">0 3 0 0</Thickness>


    <Style TargetType="{x:Type editor:PropertyGridEditorComboBox}" BasedOn="{StaticResource MahApps.Styles.ComboBox.Virtualized}">
        <Setter Property="Margin" Value="{StaticResource ControlMargin}"/>
    </Style>

    <Style TargetType="{x:Type editor:PropertyGridEditorTextBox}" BasedOn="{StaticResource MahApps.Styles.TextBox}">
        <Setter Property="Margin" Value="{StaticResource ControlMargin}"/>
        <Setter Property="BorderThickness" Value="0,0,0,1"/>
    </Style>

    <Style TargetType="{x:Type editor:PropertyGridEditorTextBlock}">
        <Setter Property="Padding" Value="{StaticResource ControlMargin}"/>

    </Style>

    <!--<Style TargetType="{x:Type editor:PropertyGridEditorIntegerUpDown}">
        <Setter Property="Margin" Value="{StaticResource ControlMargin}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <metro:NumericUpDown  HasDecimals="false" TextAlignment="Left" Value="{Binding Value}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type editor:PropertyGridEditorDecimalUpDown}">
        <Setter Property="Margin" Value="{StaticResource ControlMargin}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <metro:NumericUpDown  HasDecimals="true" TextAlignment="Left" Value="{Binding Value}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->

    <Style TargetType="{x:Type editor:PropertyGridEditorDoubleUpDown}">
        <Setter Property="Margin" Value="{StaticResource ControlMargin}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <metro:NumericUpDown TextAlignment="Left" Value="{Binding Value}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--<Style TargetType="{x:Type editor:PropertyGridEditorSingleUpDown}">
        <Setter Property="Margin" Value="{StaticResource ControlMargin}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <metro:NumericUpDown  HasDecimals="true" TextAlignment="Left" Value="{Binding Value}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->

    <Style TargetType="{x:Type editor:PropertyGridEditorCheckBox}">
        <Setter Property="Margin" Value="{StaticResource ControlMargin}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <metroControls:ToggleSwitch  IsOn="{Binding Value}" Margin="0,2,0,2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="FilterTextBoxStyle" BasedOn="{StaticResource MahApps.Styles.TextBox}" TargetType="{x:Type TextBox}">
        <Setter Property="controls:TextBoxHelper.ClearTextButton" Value="True" />
        <Style.Triggers>
            <Trigger Property="controls:TextBoxHelper.HasText" Value="False">
                <Setter Property="controls:TextBoxHelper.ClearTextButton" Value="False" />
                <Setter Property="controls:TextBoxHelper.Watermark" Value="Search..." />
            </Trigger>
            <Trigger Property="controls:TextBoxHelper.HasText" Value="True">
                <Setter Property="controls:TextBoxHelper.ClearTextButton" Value="True" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <ControlTemplate x:Key="ExpanderToggleButton" TargetType="{x:Type ToggleButton}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="20" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Rectangle x:Name="Rectangle"
                       Margin="0"
                       Fill="Transparent" />
            <Path x:Name="Up_Arrow"
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  Data="M0,0L4,4 8,0z"
                  Fill="{StaticResource GlyphBrush}"
                  RenderTransformOrigin="0.5,0.5">
                <Path.RenderTransform>
                    <TransformGroup>
                        <ScaleTransform ScaleX="1" ScaleY="1" />
                        <SkewTransform AngleX="0" AngleY="0" />
                        <RotateTransform Angle="-90" />
                        <TranslateTransform X="0" Y="0" />
                    </TransformGroup>
                </Path.RenderTransform>
            </Path>
            <Path x:Name="Down_Arrow"
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  Data="M0,4L4,0 8,4z"
                  Fill="{StaticResource GlyphBrush}"
                  RenderTransformOrigin="0.5,0.5"
                  Visibility="Collapsed">
                <Path.RenderTransform>
                    <TransformGroup>
                        <ScaleTransform ScaleX="1" ScaleY="1" />
                        <SkewTransform AngleX="0" AngleY="0" />
                        <RotateTransform Angle="135" />
                        <TranslateTransform X="0" Y="0" />
                    </TransformGroup>
                </Path.RenderTransform>
            </Path>
            <ContentPresenter Grid.Column="1"
                              Content="{TemplateBinding Content}"
                              ContentStringFormat="{TemplateBinding ContentStringFormat}"
                              ContentTemplate="{TemplateBinding ContentTemplate}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="Down_Arrow" Property="Visibility" Value="Visible" />
                <Setter TargetName="Up_Arrow" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="Down_Arrow" Property="OpacityMask" Value="Black" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="PropertyItemGroupContainerStyle" TargetType="{x:Type GroupItem}">
        <Style.Resources>
        </Style.Resources>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Expander x:Name="expander"  Header="{Binding Name}" IsExpanded="True"  Background="{DynamicResource MahApps.Brushes.Window.Background}" BorderBrush="Transparent">
                            <ItemsPresenter />
                        </Expander>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Name, Converter={StaticResource IsDefaultCategoryConverter}}"  Value="True" />
                    <Condition Binding="{Binding IsMiscCategoryLabelHidden, RelativeSource={RelativeSource AncestorType={x:Type xctk:PropertyGrid}}}"  Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type GroupItem}">
                            <!-- No Expander for the Misc Category if IsMiscCategoryLabelHidden == true-->
                            <ItemsPresenter />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="SingleDefaultCategoryItemGroupContainerStyle" TargetType="{x:Type GroupItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <!-- No Expander for the Misc Category if Misc category is the only category-->
                    <ItemsPresenter />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ContextMenu x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type xctk:PropertyGrid}, ResourceId=SelectedObjectAdvancedOptionsMenu}">
        <MenuItem Header="Reset Value"
              Command="commands:PropertyItemCommands.ResetValue"
              CommandParameter="{Binding}"
              CommandTarget="{Binding Path=PlacementTarget, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContextMenu}}}"/>
    </ContextMenu>

    <xctk:CategoryGroupStyleSelector x:Key="categoryGroupStyleSelector"
                                 SingleDefaultCategoryItemGroupStyle="{StaticResource SingleDefaultCategoryItemGroupContainerStyle}"
                                 ItemGroupStyle="{StaticResource PropertyItemGroupContainerStyle}" />

    <Style x:Key="PropertyExpanderStyle" TargetType="{x:Type Expander}">
        <Setter Property="Padding" Value="10 0 0 0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Grid>
                        <Border Visibility="Collapsed" Grid.Row="1"  x:Name="ExpandSite"  Padding="0 0 0 0">
                            <Border BorderThickness="0" Margin="0" Padding="0" VerticalAlignment="Stretch"  HorizontalAlignment="Stretch">
                                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                  Focusable="False" />
                            </Border>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="ExpandSite" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="OptionsToggleButtonStyle"
         TargetType="{x:Type RadioButton}">
        <Setter Property="Background"  Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Height" Value="22" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="ToolTipService.InitialShowDelay" Value="900" />
        <Setter Property="ToolTipService.ShowDuration" Value="20000" />
        <Setter Property="ToolTipService.BetweenShowDelay" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid SnapsToDevicePixels="True">
                        <Border x:Name="OuterBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" CornerRadius="2" />
                        <Border x:Name="MiddleBorder" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" Background="Transparent"
                            CornerRadius="2">
                            <Border x:Name="InnerBorder" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" Background="Transparent"
                                CornerRadius="2" Padding="{TemplateBinding Padding}">
                                <StackPanel x:Name="StackPanel" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                                    <ContentPresenter x:Name="Content" Content="{TemplateBinding Content}" Margin="1" RenderOptions.BitmapScalingMode="NearestNeighbor"
                                        VerticalAlignment="Center" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
                                </StackPanel>
                            </Border>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="OuterBorder" Value="{StaticResource MouseOverBackgroundBrush}" />
                            <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{StaticResource MouseOverBorderBrush}" />
                            <Setter Property="BorderBrush" TargetName="InnerBorder" Value="#80FFFFFF" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="Content" Value="0.5" />
                            <Setter Property="TextElement.Foreground" TargetName="OuterBorder" Value="#FF9E9E9E" />
                        </Trigger>

                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" TargetName="OuterBorder" Value="{StaticResource CheckedBackgroundBrush}" />
                            <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{StaticResource CheckedBorderBrush}" />
                            <Setter Property="BorderBrush" TargetName="InnerBorder">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                        <GradientStop Color="#FFE7CBAD" Offset="0" />
                                        <GradientStop Color="#FFF7D7B5" Offset="0.1" />
                                        <GradientStop Color="#FFFFD38C" Offset="0.36" />
                                        <GradientStop Color="#FFFFC75A" Offset="0.36" />
                                        <GradientStop Color="#FFFFEFA5" Offset="1" />
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="OuterBorder" Value="{StaticResource PressedBackgroundBrush}" />
                            <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{StaticResource PressedBorderBrush}" />
                            <Setter Property="BorderBrush" TargetName="InnerBorder" Value="Transparent" />
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="MiddleBorder">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                        <GradientStop Color="#40FFFEFE" Offset="0" />
                                        <GradientStop Color="#40FFFEFE" Offset="0.39" />
                                        <GradientStop Color="#20FFCE68" Offset="0.39" />
                                        <GradientStop Color="#20FFCE68" Offset="0.69" />
                                        <GradientStop Color="#10FFFFFF" Offset="1" />
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ClearFilterButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Height" Value="22" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="ToolTipService.InitialShowDelay" Value="900" />
        <Setter Property="ToolTipService.ShowDuration" Value="20000" />
        <Setter Property="ToolTipService.BetweenShowDelay" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid SnapsToDevicePixels="True">
                        <Border x:Name="OuterBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" 
                                Background="{TemplateBinding Background}" CornerRadius="2" />
                        <Border x:Name="MiddleBorder" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" Background="Transparent"
                                CornerRadius="2">
                            <Border x:Name="InnerBorder" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" Background="Transparent"
                                CornerRadius="2" Padding="{TemplateBinding Padding}">
                                <StackPanel x:Name="StackPanel" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                                    <ContentPresenter x:Name="Content" Content="{TemplateBinding Content}" Margin="1" RenderOptions.BitmapScalingMode="NearestNeighbor"
                                        VerticalAlignment="Center" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
                                </StackPanel>
                            </Border>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="OuterBorder" Value="{StaticResource MouseOverBackgroundBrush}" />
                            <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{StaticResource MouseOverBorderBrush}" />
                            <Setter Property="BorderBrush" TargetName="InnerBorder" Value="#80FFFFFF" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="Content" Value="0.5" />
                            <Setter Property="TextElement.Foreground" TargetName="OuterBorder" Value="#FF9E9E9E" />
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="OuterBorder"  Value="{StaticResource PressedBackgroundBrush}" />
                            <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{StaticResource PressedBorderBrush}" />
                            <Setter Property="BorderBrush" TargetName="InnerBorder" Value="Transparent" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="DefaultCategoryGroupHeaderTemplate">
        <TextBlock Text="{Binding}" />
    </DataTemplate>

    <Style x:Key="PropertyItemStyle" TargetType="{x:Type xctk:PropertyItemBase}">
        <Setter Property="Background"  Value="{DynamicResource MahApps.Brushes.Control.Background}" />
        <!-- Set the margin at 1 pixel bottom to let the horizontal "line" effect appear. -->
        <Setter Property="Margin" Value="0,0,0,1" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xctk:PropertyItemBase}">
                    <Border ContextMenu="{Binding AdvancedOptionsMenu, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=xctk:PropertyGrid}}"
                        ContextMenuService.Placement="Bottom">
                        <Grid VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="{Binding NameColumnWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type xctk:PropertyGrid}}}" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>

                            <!-- Set the BorderThickness at 1 pixel to the right to let the "vertical line" appear -->
                            <Border x:Name="PART_Name"
                                    Margin="0,0,1,0" VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
                                <Grid Margin="2,2,2,2">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>

                                    <Grid Margin="{Binding Level, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ExpandableObjectMarginConverter}}">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition x:Name="_expandableButtonColumn" Width="{Binding PropertyNameLeftPadding, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type xctk:PropertyGrid}}}" />
                                            <ColumnDefinition Width="*" />
                                        </Grid.ColumnDefinitions>

                                        <ToggleButton x:Name="_expandableButton" Grid.Column="0" Template="{StaticResource ExpanderToggleButton}" OverridesDefaultStyle="True"
                                            IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                            Visibility="{Binding IsExpandable, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}" >
                                        </ToggleButton>

                                        <xctk:TrimmedTextBlock x:Name="_text" Grid.Column="1"
                                             Text="{Binding DisplayName, RelativeSource={RelativeSource TemplatedParent}}"
                                             HighlightedText="{Binding HighlightedText, RelativeSource={RelativeSource TemplatedParent}}"
                                             HorizontalAlignment="Stretch"  VerticalAlignment="Center" TextTrimming="CharacterEllipsis"
                                             IsEnabled="{Binding IsReadOnly, RelativeSource={RelativeSource Mode=FindAncestor, 
                                             AncestorType=xctk:PropertyGrid}, Converter={StaticResource InverseBoolConverter}}" >
                                        </xctk:TrimmedTextBlock>
                                    </Grid>

                                    <Grid Grid.Column="1" HorizontalAlignment="Right" Margin="5,0,5,0" Visibility="{Binding ShowAdvancedOptions, 
                                        RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=xctk:PropertyGrid}, Converter={StaticResource BooleanToVisibilityConverter}}"
                                        utilities:ContextMenuUtilities.OpenOnMouseLeftButtonClick="True"
                                        ContextMenu="{Binding AdvancedOptionsMenu, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=xctk:PropertyGrid}}">

                                        <!-- ImageSource is set in Triggers for others Themes to set their proper icons -->
                                        <Image x:Name="_optionsImage"  Width="11" Height="11" ToolTip="{Binding AdvancedOptionsTooltip, RelativeSource={RelativeSource TemplatedParent}}" >
                                        </Image>
                                    </Grid>
                                </Grid>
                            </Border>

                            <Border x:Name="PART_Editor" Grid.Column="1" KeyboardNavigation.DirectionalNavigation="None"  VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
                                <Border.ToolTip>
                                    <ToolTip Visibility="Collapsed" />
                                </Border.ToolTip >
                                <ContentControl x:Name="PART_ValueContainer" Focusable="False" IsTabStop="False">
                                    <ContentControl.Content>
                                        <MultiBinding Converter="{StaticResource PropertyItemEditorConverter}">
                                            <Binding Path="Editor"  RelativeSource="{RelativeSource TemplatedParent}" />
                                            <Binding Path="IsReadOnly" RelativeSource="{RelativeSource AncestorType={x:Type xctk:PropertyGrid}}" />
                                        </MultiBinding>
                                    </ContentControl.Content>
                                </ContentControl>
                            </Border>

                            <Expander x:Name="_propertyExpander"   Style="{StaticResource PropertyExpanderStyle}" Grid.ColumnSpan="2"  Grid.Row="1" IsEnabled="True" BorderBrush="Transparent">
                                <xctk:PropertyItemsControl x:Name="PART_PropertyItemsControl"
                                         IsTabStop="False"  Focusable="False"  ItemsSource="{Binding Properties, RelativeSource={RelativeSource TemplatedParent}}"
                                         ItemContainerStyle="{Binding PropertyContainerStyle, RelativeSource={RelativeSource TemplatedParent}}"
                                         VirtualizingStackPanel.IsVirtualizing="{Binding IsVirtualizing, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=xctk:PropertyGrid}}"
                                         VirtualizingStackPanel.VirtualizationMode="Recycling"
                                         ScrollViewer.CanContentScroll="True">
                                    <ItemsControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <VirtualizingStackPanel />
                                        </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>

                                    <ItemsControl.GroupStyle>
                                        <GroupStyle ContainerStyleSelector="{StaticResource categoryGroupStyleSelector}" />
                                    </ItemsControl.GroupStyle>

                                    <ItemsControl.Template>
                                        <ControlTemplate>
                                            <Border BorderThickness="{TemplateBinding BorderThickness}"  Padding="{TemplateBinding Padding}"
                                                BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}"  SnapsToDevicePixels="True">
                                                <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                            </Border>
                                        </ControlTemplate>
                                    </ItemsControl.Template>

                                </xctk:PropertyItemsControl>
                            </Expander>

                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="PART_Name"  Property="Background" Value="{DynamicResource MahApps.Brushes.Accent2}" />
                        </Trigger>
                        <Trigger Property="IsSelected"  Value="True">
                            <Setter TargetName="PART_Name"   Property="Background" Value="{DynamicResource MahApps.Brushes.Accent}" />
                            <!--<Setter TargetName="PART_Name"   Property="TextElement.Foreground" Value="White" />-->
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground"  TargetName="PART_ValueContainer" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                            <Setter Property="Foreground"  TargetName="_text" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding ShowDescriptionByTooltip,
                                    RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=xctk:PropertyGrid}}" Value="True" />
                                <Condition Binding="{Binding Description,
                                    RelativeSource={RelativeSource Self}, Converter={StaticResource IsStringEmptyConverter}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="ToolTipService.ToolTip"  Value="{Binding Description, RelativeSource={RelativeSource TemplatedParent}}"
                                  TargetName="PART_Name" />
                        </MultiDataTrigger>
                        <!--<Trigger Property="Validation.HasError"  Value="true">
                            <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors).CurrentItem.ErrorContent}" />
                        </Trigger>-->
                        <!--<Trigger Property="Visibility" Value="Visible" SourceName="_expandableButton">
                            <Setter Property="Focusable" Value="False" />
                            <Setter Property="MinWidth"  Value="15" TargetName="_expandableButtonColumn" />
                        </Trigger>-->
                        <DataTrigger Binding="{Binding ElementName=_optionsImage, Path=ToolTip}" Value="{x:Static xctk:StringConstants.Local}">
                            <Setter TargetName="_optionsImage"   Property="Source"  Value="pack://application:,,,/DotNetProjects.Wpf.Extended.Toolkit;component/PropertyGrid/Images/Local11.png" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding ElementName=_optionsImage, Path=ToolTip}"  Value="{x:Static xctk:StringConstants.Resource}">
                            <Setter TargetName="_optionsImage" Property="Source" Value="pack://application:,,,/DotNetProjects.Wpf.Extended.Toolkit;component/PropertyGrid/Images/Resource11.png" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding ElementName=_optionsImage, Path=ToolTip}" Value="{x:Static xctk:StringConstants.Databinding}">
                            <Setter TargetName="_optionsImage" Property="Source" Value="pack://application:,,,/DotNetProjects.Wpf.Extended.Toolkit;component/PropertyGrid/Images/Database11.png" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding ElementName=_optionsImage, Path=ToolTip}" Value="{x:Static xctk:StringConstants.Inheritance}">
                            <Setter TargetName="_optionsImage" Property="Source" Value="pack://application:,,,/DotNetProjects.Wpf.Extended.Toolkit;component/PropertyGrid/Images/Inheritance11.png" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding ElementName=_optionsImage, Path=ToolTip}" Value="{x:Static xctk:StringConstants.StyleSetter}">
                            <Setter TargetName="_optionsImage" Property="Source" Value="pack://application:,,,/DotNetProjects.Wpf.Extended.Toolkit;component/PropertyGrid/Images/Style11.png" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding ElementName=_optionsImage, Path=ToolTip}"  Value="{x:Static xctk:StringConstants.Default}">
                            <Setter TargetName="_optionsImage"  Property="Source" Value="pack://application:,,,/DotNetProjects.Wpf.Extended.Toolkit;component/PropertyGrid/Images/AdvancedProperties11.png" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="PropertyGridStyle" TargetType="{x:Type xctk:PropertyGrid}">
        <Setter Property="AdvancedOptionsMenu" Value="{StaticResource {ComponentResourceKey TypeInTargetAssembly={x:Type xctk:PropertyGrid}, ResourceId=SelectedObjectAdvancedOptionsMenu}}"/>
        <Setter Property="Background"  Value="{DynamicResource MahApps.Brushes.Control.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource MahApps.Brushes.Gray6}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="SelectedObjectType" Value="{Binding RelativeSource={RelativeSource Self}, Path=SelectedObject, Converter={StaticResource ObjectConverter}, ConverterParameter=Type}"/>
        <Setter Property="SelectedObjectTypeName" Value="{Binding RelativeSource={RelativeSource Self}, Path=SelectedObject, Converter={StaticResource ObjectConverter}, 
            ConverterParameter=TypeName}" />
        <Setter Property="SelectedObjectName" Value="{Binding RelativeSource={RelativeSource Self}, Path=SelectedObject, Converter={StaticResource ObjectConverter},
            ConverterParameter=SelectedObjectName}" />
        <!--<Setter Property="CategoryGroupHeaderTemplate" Value="{StaticResource DefaultCategoryGroupHeaderTemplate}" />-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xctk:PropertyGrid}">
                    <Border Background="{TemplateBinding Background}"  BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid Margin="{TemplateBinding Padding}">

                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition />
                                <RowDefinition Height="5" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>

                            <DockPanel x:Name="selectObjectNamePanel" LastChildFill="False">
                                <Border DockPanel.Dock="Left" Background="White"  BorderBrush="Black" Visibility="{Binding ShowPreview, 
                                    RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}"
                                    BorderThickness="1" Width="44" Margin="6,4,0,4" Padding="2">
                                    <Rectangle>
                                        <Rectangle.Fill>
                                            <VisualBrush Stretch="Uniform" Visual="{Binding RelativeSource={RelativeSource TemplatedParent}, 
                                                Converter={StaticResource ObjectToUIElementConverter}, Path=SelectedObject}" />
                                        </Rectangle.Fill>
                                    </Rectangle>
                                </Border>
                                <StackPanel DockPanel.Dock="Left" Orientation="Horizontal" VerticalAlignment="Center" Margin="6,2,6,4" Visibility="{Binding ShowTitle, 
                                    RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}">
                                    <Grid MaxWidth="{Binding ActualWidth, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource HalfConverter},
                                        ConverterParameter=17}">
                                        <xctk:TrimmedTextBlock Text="{TemplateBinding SelectedObjectTypeName}"
                                             TextTrimming="CharacterEllipsis" FontWeight="Bold" >
                                        </xctk:TrimmedTextBlock>
                                    </Grid>
                                    <Grid MaxWidth="{Binding ActualWidth, RelativeSource={RelativeSource TemplatedParent}, 
                                        Converter={StaticResource HalfConverter}, ConverterParameter=17}"  Margin="5,0,0,0">
                                        <xctk:TrimmedTextBlock Text="{TemplateBinding SelectedObjectName}"
                                            TextTrimming="CharacterEllipsis" >
                                        </xctk:TrimmedTextBlock>
                                    </Grid>
                                </StackPanel>
                                <Button x:Name="Save" DockPanel.Dock="Right" Margin="0,2,5,2" HorizontalAlignment="Right"  VerticalAlignment="Center"
                                            Height="20" Width="20" ToolTip="Save changes" Visibility="{Binding ShowSaveButton, Converter={StaticResource BooleanToVisibilityConverter}}"                                     
                                            Command= "{Binding SaveCommand}"           
                                            Style="{StaticResource EditControlButtonStyle}"
                                            Content="{iconPacks:MaterialLight ContentSaveAll}"/>
                            </DockPanel>

                            <Grid x:Name="toolsContainer" Grid.Row="1"  Margin="4,0,4,4">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <Grid x:Name="sortButtonContainer" Margin="4" Visibility="{Binding ShowSortOptions,
                                    RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}">
                                    <StackPanel Orientation="Horizontal" Margin="1">
                                        <RadioButton IsChecked="{Binding IsCategorized, RelativeSource={RelativeSource TemplatedParent}}"
                                            VerticalAlignment="Center" Style="{StaticResource OptionsToggleButtonStyle}"
                                            ToolTip="Categorized">
                                            <iconPacks:PackIconMaterial Kind="Group" />
                                        </RadioButton>
                                        <RadioButton IsChecked="{Binding IsCategorized, RelativeSource={RelativeSource TemplatedParent},
                                            Converter={StaticResource InverseBoolConverter}, Mode=OneWay}" VerticalAlignment="Center"
                                            Style="{StaticResource OptionsToggleButtonStyle}" ToolTip="Alphabetical">
                                            <iconPacks:PackIconFontAwesome Kind="SortAlphaDownSolid" />
                                        </RadioButton>
                                    </StackPanel>
                                </Grid>

                                <Border x:Name="searchBoxContainer" Grid.Column="1" Margin="4,4,0,4" Background="White" BorderBrush="Gray" BorderThickness="1"
                                    Visibility="{Binding ShowSearchBox, RelativeSource={RelativeSource TemplatedParent},
                                    Converter={StaticResource BooleanToVisibilityConverter}}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="Auto" />
                                        </Grid.ColumnDefinitions>
                                        <TextBox x:Name="_txtFilter" Style="{StaticResource FilterTextBoxStyle}" controls:TextBoxHelper.ButtonCommand="{x:Static commands:PropertyGridCommands.ClearFilter}"
                                            Text="{Binding Filter, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}"                                          
                                            BorderThickness="1">
                                        </TextBox>
                                    </Grid>
                                </Border>
                            </Grid>

                            <Grid Grid.Row="2"  Background="{TemplateBinding Background}">
                                <xctk:PropertyItemsControl  x:Name="PART_PropertyItemsControl"
                                          IsTabStop="False"
                                          Focusable="False"
                                          ItemsSource="{Binding Properties, RelativeSource={RelativeSource TemplatedParent}}"
                                          ItemContainerStyle="{Binding PropertyContainerStyle, RelativeSource={RelativeSource TemplatedParent}}"
                                          Background="{DynamicResource MahApps.Brushes.Control.Background}"
                                          VirtualizingStackPanel.IsVirtualizing="{Binding IsVirtualizing, RelativeSource={RelativeSource TemplatedParent}}"
                                          VirtualizingStackPanel.VirtualizationMode="Recycling"
                                          ScrollViewer.CanContentScroll="True"
                                          VerticalAlignment="Top">

                                    <ItemsControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <VirtualizingStackPanel />
                                        </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>

                                    <ItemsControl.GroupStyle>
                                        <GroupStyle ContainerStyleSelector="{StaticResource categoryGroupStyleSelector}" />
                                    </ItemsControl.GroupStyle>

                                    <ItemsControl.Template>
                                        <ControlTemplate>
                                            <Border BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}"
                                                BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}"
                                                SnapsToDevicePixels="True">
                                                <ScrollViewer x:Name="ScrollBar" Padding="{TemplateBinding Padding}" Focusable="False"
                                                    VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled">
                                                    <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                                </ScrollViewer>
                                            </Border>
                                            <ControlTemplate.Triggers>
                                                <DataTrigger Binding="{Binding ShowHorizontalScrollBar, 
                                                    RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=xctk:PropertyGrid}}"
                                                    Value="True">
                                                    <Setter Property="HorizontalScrollBarVisibility" Value="Auto" TargetName="ScrollBar" />
                                                </DataTrigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </ItemsControl.Template>

                                </xctk:PropertyItemsControl>

                                <Thumb x:Name="PART_DragThumb" HorizontalAlignment="Left" Width="5" Margin="6,0,0,0"  Cursor="SizeWE">
                                    <Thumb.Template>
                                        <ControlTemplate>
                                            <Border Background="Transparent" />
                                        </ControlTemplate>
                                    </Thumb.Template>
                                </Thumb>

                            </Grid>

                            <GridSplitter Height="3"  Grid.Row="3" HorizontalAlignment="Stretch"
                                Visibility="{Binding ShowSummary, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}" >
                            </GridSplitter>

                            <StackPanel Grid.Row="4"  Margin="0,0,0,5" Visibility="{Binding ShowSummary, RelativeSource={RelativeSource TemplatedParent}, 
                                Converter={StaticResource BooleanToVisibilityConverter}}">
                                <TextBlock Padding="2 2 2 0"  FontWeight="Bold" Text="{Binding SelectedPropertyItem.DisplayName, 
                                    RelativeSource={RelativeSource TemplatedParent}}" >
                                </TextBlock>
                                <TextBlock Padding="5 2 2 0" TextWrapping="WrapWithOverflow" Text="{Binding SelectedPropertyItem.Description, 
                                    RelativeSource={RelativeSource TemplatedParent}}" >
                                </TextBlock>
                            </StackPanel>

                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="searchBoxContainer" Property="Visibility" Value="Collapsed" />
                                <Condition SourceName="sortButtonContainer" Property="Visibility" Value="Collapsed" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="toolsContainer" Property="Visibility" Value="Collapsed" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>